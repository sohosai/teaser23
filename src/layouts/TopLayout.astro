---
import { i18nAdapter, t } from "src/utils/i18n";
i18nAdapter.init(Astro);

import type { Props as HeadProps } from "src/components/BaseHead.astro";
import BaseLayout from "src/layouts/BaseLayout.astro";
import Header from "src/components/Header.astro";
import Footer from "src/components/Footer.astro";
import Hero from "src/components/Hero.astro";

export type Props = HeadProps;
const { ...head } = Astro.props;

const isTop = Astro.url.pathname == "/";
---

<BaseLayout {...head}>
  <Header />
  <Hero />
  <main>
    <slot />
  </main>
  <Footer />
</BaseLayout>

<script>
  const hero = document.getElementById("hero");
  const navigation = document.getElementById("top-navigation");

  // ナビゲーションバーの高さ(maginを含む)を計測
  const navigation_height = navigation?.offsetHeight;

  const observer_options = {
    root: null, // ビューポート全体を対象
    rootMargin: `-${navigation_height}px 0px 0px 0px`, // ナビゲーションバーの分を引く
    threshold: 0, // 全部隠れたときにintersectionしていないと判定
  };

  function makeIntersectionObserver() {
    return new IntersectionObserver((entries) => {
      // 今回はtargetのDOMをidで指定しているので1番目だけ見れば良い
      const entry = entries[0];
      if (entry.isIntersecting) {
        // 動画が見えているとき
        if (navigation) {
          navigation.dataset.navigation_style = "transparent";
        }
      } else {
        // 見えていないとき
        if (navigation) {
          navigation.dataset.navigation_style = "white";
        }
      }
    }, observer_options);
  }

  let observer = makeIntersectionObserver();
  if (hero) {
    observer.observe(hero);
  }

  const resizeObserver = new ResizeObserver((entries) => {
    const entry = entries[0];
    if (hero) {
      observer.unobserve(hero);
    }

    observer_options.rootMargin = `-${entry.contentRect.height}px 0px 0px 0px`;
    observer = makeIntersectionObserver();
    if (hero) {
      observer.observe(hero);
    }
  });
  if (navigation) {
    resizeObserver.observe(navigation);
  }
</script>

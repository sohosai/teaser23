---
import { i18nAdapter, t, l } from "src/utils/i18n";
i18nAdapter.init(Astro);

import { spQuery } from "src/styles/css-variables";

import { Image } from "astro:assets";
import { Icon } from "astro-icon";
import Container from "src/components/Container.astro";

import logoWhite from "src/assets/logo-white.svg";
import logoBlack from "src/assets/logo-black.svg";

const isTop = Astro.url.pathname == "/";
const defaultNavigationStyle = isTop ? "transparent" : "white";
---

<header id="top-navigation" data-navigation_style={defaultNavigationStyle} data-spquery={spQuery}>
  <div class="navigation-wrapper">
    <nav class="navigation-menu-wrapper">
      <a href={l("/")} class="logo" aria-label={t("accessibility.トップページへ")}>
        <Image src={logoWhite} alt={t("base.雙峰祭")} class="logo-white" />
        <Image src={logoBlack} alt={t("base.雙峰祭")} class="logo-black" />
      </a>
      <button id="hamburger-button" type="button" aria-controls="navigation-items">
        <Icon name="hamburger-menu" height="48" width="48" />
        <span id="menu-open-text" class="aria" aria-hidden="false"> {t("accessibility.メニューを開く")}</span>
        <span id="menu-close-text" class="aria" aria-hidden="true"> {t("accessibility.メニューを閉じる")}</span>
      </button>
    </nav>
    <ul id="navigation-items" role="list" aria-hidden="true">
      <li><a href={l("news/")}>{t("nav.お知らせ")}</a></li>
      <li><a href={l("coverage/")}>{t("nav.協賛・取材")}</a></li>
      <li><a href={l("committee/")}>{t("nav.実委")}</a></li>
      <li><a href={l("shinkan/")}>{t("nav.新歓")}</a></li>
    </ul>
  </div>
</header>

<script>
  class HTMLElementWrapper {
    e: HTMLElement | null = null;

    constructor(htmlElement: HTMLElement | null) {
      if (htmlElement) {
        this.e = htmlElement;
      }
    }

    set isAriaExpanded(status: boolean | undefined) {
      if (this.e) {
        if (status == undefined) {
          this.e.removeAttribute("aria-expanded");
        } else {
          this.e.setAttribute("aria-expanded", status.toString());
        }
      }
    }

    set isAriaHidden(status: boolean) {
      if (this.e) {
        this.e.setAttribute("aria-hidden", status.toString());
      }
    }
  }

  const navigation = new HTMLElementWrapper(document.getElementById("top-navigation"));
  const navigationItems = new HTMLElementWrapper(document.getElementById("navigation-items"));
  const hamburgerButton = new HTMLElementWrapper(document.getElementById("hamburger-button"));
  const menuOpenText = new HTMLElementWrapper(document.getElementById("menu-open-text"));
  const menuCloseText = new HTMLElementWrapper(document.getElementById("menu-close-text"));

  const spQuery = navigation.e?.dataset.spquery ?? "";

  const mediaQuery = window.matchMedia(spQuery);

  let isOpen = false;

  type navigationStatus = "open" | "closed" | "pcLayout";

  function setNavigationStatus(target: navigationStatus): navigationStatus {
    switch (target) {
      case "open":
        navigation.isAriaExpanded = true;
        navigationItems.isAriaHidden = false;
        menuOpenText.isAriaHidden = true;
        menuCloseText.isAriaHidden = false;

        return "open";
      case "closed":
        navigation.isAriaExpanded = false;
        navigationItems.isAriaHidden = true;
        menuOpenText.isAriaHidden = false;
        menuCloseText.isAriaHidden = true;

        return "closed";
      case "pcLayout":
        navigation.isAriaExpanded = undefined;
        navigationItems.isAriaHidden = false;

        return "pcLayout";
    }
  }

  function handleWidthChange(e: MediaQueryList | MediaQueryListEvent) {
    // ウィンドウの幅が変更されたときの処理
    // アクセシビリティのため、aria-expandedとaria-hiddenを画面幅によって動的に書き換える必要がある
    if (e.matches) {
      // スマホの幅になったら、前回スマホ表示だったときのメニューの状態を反映させてスマホの表示を適用する
      const target = isOpen ? "open" : "closed";
      setNavigationStatus(target);
    } else {
      // PCの幅になったら、PCの表示を適用する
      // ただし、スマホレイアウトのときのメニューの状態には触らないようにする
      setNavigationStatus("pcLayout");
    }
  }

  mediaQuery.addEventListener("change", handleWidthChange);
  // 最初に1回実行しておく
  handleWidthChange(mediaQuery);

  hamburgerButton.e?.addEventListener("click", () => {
    const toggled = isOpen ? "closed" : "open";
    isOpen = setNavigationStatus(toggled) === "open";
  });
</script>

<style lang="scss">
  [class^="logo"] {
    display: block;
  }
  /* ナビゲーション全体のスタイル */
  header {
    position: fixed;
    width: 100%;
    transition: background-color 0.25s ease;
    /* ナビゲーションが透明のときのスタイルの指定 */
    &[data-navigation_style="transparent"] {
      background-color: rgba(0, 0, 0, 0.25);
      color: $font-white;
      &[aria-expanded="true"] {
        background-color: rgba(0, 0, 0, 0.75);
      }
      .logo-black {
        display: none;
      }
      li {
        a {
          color: $font-white;
          @media screen and ($pc-query) {
            &::before {
              content: "";
              display: inline-block;
              height: 100%;
              width: 100%;
              position: absolute;
              top: 0;
              left: 0;
              z-index: -1;
              border-radius: 1.5rem;
              background: linear-gradient($blue, $orange);
              filter: blur(1rem);
              opacity: 0;
              transition: opacity 0.25s ease;
            }
            &:hover::before {
              opacity: 45%;
            }
          }
          @media screen and ($sp-query) {
            transition: color 0.25s ease;
            &:hover {
              color: $blue;
            }
          }
        }
      }
      svg[astro-icon="hamburger-menu"] {
        stroke: $font-white;
      }
    }
    /* ナビゲーションが白のときのスタイルの指定 */
    &[data-navigation_style="white"] {
      box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 4px;
      background-color: $background;
      .logo-white {
        display: none;
      }
      svg[astro-icon="hamburger-menu"] {
        stroke: $font-black;
      }
      li {
        a {
          color: $font-black;
          transition: color 0.5s ease;
          &:hover {
            color: $blue;
          }
        }
      }
      @media screen and ($sp-query) {
        box-shadow: none;
        &[aria-expanded="true"] {
          box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 4px;
        }
        background-color: transparent;
        .navigation-menu-wrapper {
          background-color: $background;
          position: relative;
          z-index: 100;
          box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 4px;
        }
        #navigation-items {
          background-color: $background-translucent;
          backdrop-filter: blur(10px);
        }
      }
    }
  }
  .navigation-wrapper {
    width: 100%;
    display: flex;
    justify-content: space-between;
    flex-direction: row;
    align-items: center;
    width: 100%;
    max-width: $content-width;
    margin-inline: auto;
    padding-inline: $side-padding;
    @media screen and ($sp-query) {
      flex-direction: column;
      align-items: flex-start;
      max-width: none;
      margin: 0;
      padding: 0;
    }
  }
  .navigation-menu-wrapper {
    display: flex;
    height: $navigation-height;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    @media screen and ($sp-query) {
      width: 100%;
      max-width: $content-width;
      margin-inline: auto;
      padding-inline: $side-padding;
    }
  }
  .logo {
    padding: 0.75em 0;
    > img {
      height: 2.5em;
      width: auto;
      margin: 0;
    }
  }
  #navigation-items {
    display: flex;
    transition: opacity 0.5s ease;
    flex-direction: row;
    gap: 0 1em;
    li {
      margin: 0;
      a {
        position: relative;
        display: inline-block;
        font-size: 1rem;
        padding: 1em 0;
        text-decoration: none;
      }
    }
    &[aria-hidden="true"] {
      display: none;
    }
    &[aria-hidden="false"] {
      height: auto;
    }
    @media screen and ($sp-query) {
      flex-direction: column;
      width: 100%;
      max-width: $content-width;
      margin-inline: auto;
      padding-inline: $side-padding;
      li {
        width: 100%;
        margin: 0.5em 0;
      }
    }
  }
  /* ハンバーガーメニュー */
  #hamburger-button {
    cursor: pointer;
    & [astro-icon="hamburger-menu"] {
      transition: all 50ms ease;
    }
    & [astro-icon="hamburger-menu"]:hover {
      width: 110%;
      height: 110%;
      margin-inline-start: -5%;
    }
    display: none;
    @media screen and ($sp-query) {
      display: block;
    }
  }

  /* スマホ表示でハンバーガーメニューを開いたときのアニメーション */
  @media screen and ($sp-query) {
    #navigation-items[aria-hidden="false"] li {
      $animation-duration: 400ms;
      $animation-timing: 50ms;

      &:nth-child(1) {
        animation: $animation-duration ease 0s 1 normal both slidein;
      }
      &:nth-child(2) {
        animation: $animation-duration ease ($animation-timing * 1) 1 normal both slidein;
      }
      &:nth-child(3) {
        animation: $animation-duration ease ($animation-timing * 2) 1 normal both slidein;
      }
      &:nth-child(4) {
        animation: $animation-duration ease ($animation-timing * 3) 1 normal both slidein;
      }

      @keyframes slidein {
        0% {
          margin-inline-start: -16em;
        }
        100% {
          margin-inline-start: 0;
        }
      }

      @media (prefers-reduced-motion) {
        &:nth-child(n) {
          animation-name: dissolve;
        }
        margin: 0;
      }
    }
  }
</style>
